;;; Delimited Control Tests

;; The following tests are adapted from the file `testd0.ml' of the
;; caml-shift distribution, available at the URL
;; `http://okmij.org/ftp/continuations/implementations.html'

;; First, some preliminary definitions.

(defun abort-subcont (prompt value)
  "Utility that captures the continuation but just ignores it."
  (take-subcont prompt #ignore value))

(defmacro push-subcont (k . forms)
  "We don't have `push-subcont' but for these tests we can emulate it
with a `push-delim-subcont' that pushes an unused prompt."
  (list* #'push-delim-subcont ''unused-prompt k forms))

(defun shift (p #'f)
  "The `shift' operator, adapted from the file `delimcc.ml'."
  (take-subcont p sk
    (push-prompt p
      (f (lambda (#'c)
           (push-delim-subcont p sk (c)))))))

(defun prompt-set-p (prompt)
  "Return true if a prompt is set, false otherwise.
(Note that this leads to stack growth, i.e. leaks.)"
  (handler-case ((prompt-not-found-error (lambda #ignore #f)))
    (take-subcont prompt k (push-delim-subcont prompt k #t))))

;; The actual tests.

(defsuite caml-shift

  (deftest test1
    (progn
      (assert (not (prompt-set-p 'p)))
      (push-prompt 'p
        (assert (prompt-set-p 'p))
        1))
    1)

  (deftest test2
    (+ (push-prompt 'p (push-prompt 'p 5))
       4)
    9)

  (deftest test3
    (+ (push-prompt 'p (+ 6 (abort-subcont 'p 5)))
       4)
    9)

  (deftest |test3'|
    (+ (push-prompt 'p
         (push-prompt 'p (+ 6 (abort-subcont 'p 5))))
       4)
    9)

  (deftest |test3''|
    (+ (push-prompt 'p
         (push-prompt 'p (+ 6 (abort-subcont 'p 5)))
         (+ (abort-subcont 'p 7)
            10))
       20)
    27)

  (deftest |test3'''|
    (signals-error
     (progn
       (push-prompt 'p
         (push-prompt 'p (+ 6 (abort-subcont 'p 5)))
         (+ (abort-subcont 'p 7)
            10))
       (abort-subcont 'p 9))
     prompt-not-found-error :prompt 'p))

  (deftest test4
    (+ (push-prompt 'p
         (+ (take-subcont 'p sk
              (push-prompt 'p
                (push-subcont sk 5)))
            10))
       20)
    35)

  (deftest test5
    (+ (push-prompt 'p0
         (+ (shift 'p0 (lambda (#'sk)
                         (+ 100 (sk (lambda () (sk (lambda () 3)))))))
            2))
       10)
    117)

  (deftest |test5'|
    (+ 10 (push-prompt 'p0
            (+ 2 (shift 'p0 (lambda (#'sk)
                              (sk (lambda () (+ 3 100))))))))
    115)

  (deftest |test5''|
    (+ (push-prompt 'p0
         (+ (shift 'p0 (lambda (#'sk)
                         (+ (sk (lambda ()
                                  (push-prompt 'p1
                                    (+ 9 (sk (lambda () (abort-subcont 'p1 3)))))))
                            100)))
            2))
       10)
    115)

  (deftest |test5'''|
    (+ (push-prompt 'p0
         (let ((v (shift 'p0 (lambda (#'sk)
                               (+ (sk (lambda ()
                                        (push-prompt 'p1
                                          (+ 9 (sk (lambda ()
                                                     (abort-subcont 'p1 3)))))))
                                  100)))))
           (+ v 2)))
       10)
    115)

  (deftest test54
    (+ (push-prompt 'p0
         (let ((v (shift 'p0 (lambda (#'sk)
                               (+ (sk (lambda ()
                                        (push-prompt 'p1
                                          (+ 9 (sk (lambda ()
                                                     (abort-subcont 'p0 3)))))))
                                  100)))))
           (+ v 2)))
       10)
    124)

  (deftest test6
    (+ (flet ((push-twice (sk)
                (push-subcont sk (push-subcont sk 3))))
         (push-prompt 'p1
           (push-prompt 'p2
             (+ (take-subcont 'p1 sk
                  (push-twice sk))
                1))))
       10)
    15)

  (deftest test7
    (+ (flet ((push-twice (sk)
                (push-subcont sk
                  (push-subcont sk
                    (take-subcont 'p2 sk2
                      (push-subcont sk2
                        (push-subcont sk2 3)))))))
         (push-prompt 'p1
           (+ (push-prompt 'p2
                (+ 10 (push-prompt 'p3
                        (take-subcont 'p1 sk (push-twice sk)))))
              1)))
       100)
    135)

  (deftest |test7'|
    (+ (flet ((push-twice (#'sk)
                (sk (lambda ()
                      (sk (lambda ()
                            (shift 'p2 (lambda (#'sk2)
                                         (sk2 (lambda ()
                                                (sk2 (lambda () 3))))))))))))
         (push-prompt 'p1
           (+ (push-prompt 'p2
                (+ 10 (push-prompt 'p3
                        (shift 'p1 (lambda (#'sk) (push-twice #'sk))))))
              1)))
       100)
    135))

;;; Delimited Dynamic Binding

;; The following tests are adapted from the files `caml-dynvar.ml' and
;; `dynvar-scheme48-problem.scm' of the DBplusDC distribution, available
;; at the URL `http://okmij.org/ftp/Computation/dynamic-binding.html'

(defun dset (dynvar value)
  "Set the value of a dynamic variable and return the old value."
  (prog1 (dynamic dynvar)
    (set-dynamic dynvar value)))

(defsuite dbplusdc

  (deftest testc
    (progn
      (defdynamic *p*)
      (dynamic-let ((*p* 0))
        (flet ((f () (dynamic *p*)))
          (let ((x (f))
                (y (dynamic-let ((*p* 1)) (f)))
                (z (f)))
            (list x y z)))))
    '(0 1 0))

  (deftest test1
    (progn
      (defdynamic *p*)
      (dynamic-let ((*p* 1))
        (list (dynamic *p*) (dynamic *p*))))
    '(1 1))

  (deftest test11
    (progn
      (defdynamic *p*)
      (dynamic-let ((*p* 1))
        (list (dynamic *p*)
              (dynamic *p*)
              (dynamic-let ((*p* 2))
                (dynamic *p*)))))
    '(1 1 2))

  ;; It's probably a happy accident that this test works, since
  ;; our `dset' is pretty different from DBplusDC's.
  (deftest test12
    (progn
      (defdynamic *p*)
      (dynamic-let ((*p* 1))
        (let* ((v1 (dynamic *p*))
               (v2 (dynamic-let ((*p* 2))
                     (let ((v3 (dset *p* 12))
                           (v4 (dynamic *p*)))
                       (list v3 v4)))))
          (let ((v5 (dynamic *p*)))
            (list v1 v2 v5)))))
    '(1 (2 12) 1))

  (deftest test_eq4
    (progn
      (defdynamic *p*)
      (dynamic-let ((*p* 1))
        (push-prompt 'p0
          (dynamic *p*))))
    1)

  (deftest test_eq5
    (progn
      (defdynamic *p*)
      (dynamic-let ((*p* 1))
        (push-prompt 'p0
          (dynamic-let ((*p* 2))
            (take-subcont 'p0 #ignore
              (dynamic *p*))))))
    1)

  (deftest test_eq6
    (progn
      (defdynamic *p*)
      (defdynamic *q*)
      ((lambda (#'f)
         (dynamic-let ((*p* 2) (*q* 20))
           (#'f (lambda () 0))))
       (dynamic-let ((*p* 1))
         (push-prompt 'p
           (dynamic-let ((*q* 10))
             ((lambda (x) (+ (dynamic *p*) (dynamic *q*)))
              (shift 'p (lambda (f) f))))))))
    12))

;;; Tests for single prompt coroutines

(defsuite |Coroutines|

  (deftest |Adapted from A Monadic Framework for Delimited Continuations|
    (+ 2 (coroutine (if (yield k (+ (resume k #f) (resume k #t)))
                        3
                        4)))
    9))
