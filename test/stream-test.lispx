;;; Stream Tests

(defsuite stream-tests

  (deftest standard-streams-defined
    (and (typep *standard-input* (class dynamic))
         (typep *standard-output* (class dynamic)))))

(defsuite string-input-streams

  (deftest make-string-input-stream.1
    (typep (make-string-input-stream "foo") (class string-input-stream)))

  (deftest make-string-input-stream.2
    (signals-error
     (make-string-input-stream)
     match-error))

  (deftest make-string-input-stream.3
    (signals-error
     (make-string-input-stream 12)
     type-error :datum 12 :expected-type 'string))

  (deftest with-standard-input-from-string.1
    (with-standard-input-from-string "foo")
    #void)

  (deftest with-standard-input-from-string.2
    (with-standard-input-from-string "12" (read))
    12)

  (deftest with-standard-input-from-string.2
    (with-standard-input-from-string "12 #t" (read) (read))
    #t))

(defsuite string-output-streams

  (deftest make-string-output-stream.1
    (typep (make-string-output-stream) (class string-output-stream)))

  (deftest with-standard-output-to-string.1
    (with-standard-output-to-string (print "foo") (print "bar"))
    "\n\"foo\"\n\"bar\"")

  (deftest with-standard-output-to-string.2
    (with-standard-output-to-string)
    "")

  (deftest get-output-stream-string.1
    (let ((s (make-string-output-stream)))
      (get-output-stream-string s))
    "")

  (deftest get-output-stream-string.2
    (signals-error
     (get-output-stream-string)
     match-error))

  (deftest get-output-stream-string.3
    (signals-error
     (get-output-stream-string 1)
     type-error :datum 1 :expected-type 'string-output-stream)))

(defsuite fresh-line

  (deftest fresh-line.1
    (with-standard-output-to-string (fresh-line) (uprint1 "a") (fresh-line))
    "\na\n")

  (deftest fresh-line.2
    (let ((sos (make-string-output-stream)))
      (with-standard-output-to-string
       (fresh-line) (uprint1 "a") (fresh-line)
       (fresh-line sos) (dynamic-let ((*standard-output* sos)) (uprint1 "b")) (fresh-line sos)
       (assert (= "\nb\n" (get-output-stream-string sos)))))
    "\na\n"))
