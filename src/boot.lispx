;;;                                                     -*- Lisp -*-
;;; LispX Bootstrap
;;;

;; Copyright (c) 2021, 2022 Manuel J. Simoni

;;; Core Forms

(%def #'list
  (%wrap (%vau arguments #ignore arguments))
  "Return the list of evaluated ARGUMENTS.
$(fn (arguments))
$(type function)")

(%def #'vau
  (%vau (parameter-tree environment-parameter . forms) env
    (%eval (list #'%vau parameter-tree environment-parameter
                 (%list* #'%progn forms))
           env))
  "Construct a fexpr with the given PARAMETER-TREE,
ENVIRONMENT-PARAMETER, and FORMS.
$(fn (parameter-tree environment-parameter . forms))
$(type fexpr)")

(%def #'lispx::make-macro
  (%wrap
   (%vau (expander) #ignore
     (%vau form env
       (%eval
        (%eval (%cons expander form) (%make-environment))
        env))))
  "Create a macro from an EXPANDER operator.  A macro is an operator
that receives a form and produces an expression (by calling the
expander with the form as argument) that is then evaluated in place of
the form.
$(fn (expander))
$(type function)")

(%def #'macro
  (lispx::make-macro
   (%vau (parameter-tree . forms) #ignore
     (list #'lispx::make-macro
           (%list* #'vau parameter-tree #ignore forms))))
  "Create an anonymous macro with the given PARAMETER-TREE and FORMS.
$(fn (parameter-tree . forms))
$(type macro)")

(%def #'defmacro
  (macro (name parameter-tree . forms)
    (list #'%def (%function-symbol name)
          (%list* #'macro parameter-tree forms)))
  "Define a macro with the given NAME, PARAMETER-TREE, and FORMS.
$(fn (name parameter-tree . forms))
$(type macro)")

(defmacro defexpr (name parameter-tree environment-parameter . forms)
  "Define a fexpr with the given NAME, PARAMETER-TREE,
ENVIRONMENT-PARAMETER, and FORMS."
  (list #'%def (%function-symbol name)
        (%list* #'vau parameter-tree environment-parameter forms)))

(defmacro def (definiend-tree value . docstring?)
  "Match the DEFINIEND-TREE against the VALUE and place resulting
bindings into the current environment.  The optional DOCSTRING? is
currently ignored."
  (list #'%def definiend-tree value))

(defmacro defconstant (name value . docstring?)
  "Define a constant with the given NAME and VALUE.  This is mostly
for documentation purposes, as constants are still mutable.  The
optional DOCSTRING? is currently ignored."
  (list #'def name value))

(defmacro lambda (parameter-tree . forms)
  "Create an anonymous function with the given PARAMETER-TREE and FORMS."
  (list #'%wrap (%list* #'vau parameter-tree #ignore forms)))

(defmacro defun (name parameter-tree . forms)
  "Define a function with the given NAME, PARAMETER-TREE, and FORMS."
  (list #'def (%function-symbol name)
        (%list* #'lambda parameter-tree forms)))

;;; Built-Ins

(defmacro progn forms
  "Sequentially evaluate FORMS, returning the value of the last one,
or void if there are no forms."
  (list* #'%progn forms))

(defmacro if (test consequent alternative)
  "Evaluate the TEST which must yield a boolean.  Then evaluate either
the CONSEQUENT or ALTERNATIVE depending on whether the TEST yielded
true or false."
  (list #'%if test consequent alternative))

(defmacro catch (tag . forms)
  "Establish a catch tag and evaluate FORMS as an implicit `progn'
inside it.  The forms may use `throw' to nonlocally exit from the
tag.  Usually, `block' should be preferred."
  (list #'%catch tag (list* #'lambda () forms)))

(defun throw (tag . result?)
  "Abort to a nesting catch tag established by `catch' and pass the
optional RESULT? (defaults to void) to it."
  (%throw tag (optional result?)))

(defmacro loop forms
  "Evaluate the FORMS in an infinite loop."
  (list #'%loop (list* #'progn forms)))

(defun eq (a b)
  "Return true if the values A and B are pointer-identical, false otherwise."
  (%eq a b))

(defun class-of (object)
  "Return the class of the OBJECT."
  (%class-of object))

(defun typep (object class)
  "Return true if the OBJECT is an instance of the CLASS, false otherwise."
  (%typep object class))

(defun intern (string)
  "Get or create the unique symbol with STRING as name."
  (%intern string))

(defun symbol-name (symbol)
  "Return the name of the SYMBOL as a string."
  (%symbol-name symbol))

(defun variable-symbol (symbol)
  "Return the symbol with the same name as SYMBOL, but in the variable namespace."
  (%variable-symbol symbol))

(defun function-symbol (symbol)
  "Return the symbol with the same name as SYMBOL, but in the function namespace."
  (%function-symbol symbol))

(defun class-symbol (symbol)
  "Return the symbol with the same name as SYMBOL, but in the class namespace."
  (%class-symbol symbol))

(defun keyword-symbol (symbol)
  "Return the symbol with the same name as SYMBOL, but in the keyword namespace."
  (%keyword-symbol symbol))

(defun cons (car cdr)
  "Create a cons with the given CAR and CDR."
  (%cons car cdr))

(defun car (cons)
  "Return the contents of the address part of the register."
  (%car cons))

(defun cdr (cons)
  "Return the contents of the decrement part of the register."
  (%cdr cons))

(defun list* arguments
  "Create a list from the ARGUMENTS so that the last argument becomes
the `cdr' of the list."
  (apply #'%list* arguments))

(defun reverse (list)
  "Reverse the LIST."
  (%reverse list))

(defun wrap (operator)
  "Create a new function that wraps around an underlying OPERATOR, and
induces argument evaluation around it."
  (%wrap operator))

(defun unwrap (function)
  "Return the underlying operator of a FUNCTION."
  (%unwrap function))

(defun eval (form environment)
  "Evaluate the FORM in the ENVIRONMENT, returning its result."
  (%eval form environment))

(defun make-environment parent-environment?
  "Create a new environment with an optional PARENT-ENVIRONMENT? in
which bindings are looked up if they are not found."
  (apply #'%make-environment parent-environment?))

(defun boundp (symbol environment)
  "Return true if the SYMBOL is bound in the ENVIRONMENT, false otherwise."
  (%boundp symbol environment))

(defun panic (error)
  "Signal the ERROR in such a way that it cannot be handled and escapes
the VM as a host language exception.  This unconditionally breaks out
of Lisp, ignoring `handler-bind', `unwind-protect', `progv', and other
operators that are normally invoked while signalling or unwinding.
Therefore Lisp invariants might be invalid after calling this
function, and the VM should be discarded."
  (%panic error))

;;; Lexical Bindings

(defmacro let (bindings . forms)
  "Establish BINDINGS parallelly during the evaluation of FORMS, so
that no binding can refer to the other ones.
$(syntax binding (definiend-tree value))"
  (list* (list* #'lambda (mapcar #'car bindings)
                forms)
         (mapcar #'cadr bindings)))

(defmacro let* (bindings . forms)
  "Establish BINDINGS serially during the evaluation of FORMS, so that
every binding can refer to previous ones.
$(syntax binding (definiend-tree value))"
  (if (null bindings)
      (list* #'let () forms) ; Always introduce a new scope.
      (list #'let (list (car bindings))
            (list* #'let* (cdr bindings) forms))))

(defmacro lispx::letrec (bindings . forms)
  "Utility to establish BINDINGS recursively during the evaluation of
FORMS.  Used by `labels'."
  (if (null bindings)
      (list* #'let () forms) ; Always introduce a new scope.
      (list* #'let ()
             (list #'def
                   (mapcar #'car bindings)
                   (list* #'list (mapcar #'cadr bindings)))
             forms)))

(defun lispx::function-binding ((name parameter-tree . forms))
  "Utility to turn a function binding as it appears in `flet' and
`labels' into a binding for `let' or `%letrec'."
  (list (function-symbol name) (list* #'lambda parameter-tree forms)))

(defmacro flet (function-bindings . forms)
  "Establish FUNCTION-BINDINGS parallelly during evaluation of FORMS,
so that no function can refer to the other ones.
$(syntax function-binding (name parameter-tree . forms))"
  (list* #'let (mapcar #'lispx::function-binding function-bindings) forms))

(defmacro labels (function-bindings . forms)
  "Establish FUNCTION-BINDINGS recursively during evaluation of FORMS,
so that every function can refer to the other ones.
$(syntax function-binding (name parameter-tree . forms))"
  (list* #'lispx::letrec (mapcar #'lispx::function-binding function-bindings) forms))

;;; Data and Control Flow

(defexpr quote (operand) #ignore
  "Return the unevaluated OPERAND."
  operand)

(defexpr the-environment () environment
  "Return the current environment."
  environment)

(defun apply (function arguments)
  "Call the FUNCTION with a dynamically-supplied list of ARGUMENTS."
  (eval (cons (unwrap function) arguments) (%make-environment)))

(defmacro when (test . forms)
  "If TEST yields true, evaluate the FORMS as an implicit `progn'.
Otherwise, return void."
  (list #'if test (list* #'progn forms) #void))

(defmacro unless (test . forms)
  "If TEST yields false, evaluate the FORMS as an implicit `progn'.
Otherwise, return void."
  (list #'if test #void (list* #'progn forms)))

(defexpr cond clauses env
  "Multi-armed conditional.
Go through the CLAUSES in order.  Evaluate the TEST.  If it yields
true, evaluate the FORMS as an implicit `progn'.  If it yields false,
go to the next clause, or return void if there are no more clauses.
$(syntax clause (test . forms))"
  (unless (null clauses)
    (let ((((test . forms) . rest-clauses) clauses))
      (if (eval test env)
          (eval (cons #'progn forms) env)
          (eval (cons #'cond rest-clauses) env)))))

(defun not (boolean)
  "Invert the BOOLEAN."
  (if boolean #f #t))

(defexpr and operands env
  "Return true if all OPERANDS evaluate to true, false otherwise.  If
an operand evaluates to false, later operands are not evaluated.  If
there are no operands, return false."
  (cond ((null operands)           #t)
        ((null (cdr operands))     (the boolean (eval (car operands) env)))
        ((eval (car operands) env) (eval (cons #'and (cdr operands)) env))
        (#t                        #f)))

(defexpr or operands env
  "Return true if one of the OPERANDS evaluates to true, false
otherwise.  If an operand evaluates to true, later operands are not
evaluated.  If there are no operands, return true."
  (cond ((null operands)           #f)
        ((null (cdr operands))     (the boolean (eval (car operands) env)))
        ((eval (car operands) env) #t)
        (#t                        (eval (cons #'or (cdr operands)) env))))

(defexpr while (test-form . forms) env
  "Evaluate FORMS while TEST-FORM evaluates to true."
  (let ((forms (list* #'progn forms)))
    (block exit
      (loop
        (if (eval test-form env)
            (eval forms env)
            (return-from exit))))))

(defmacro until (test-form . forms)
  "Evaluate FORMS until TEST-FORM evaluates to true."
  (list* #'while (list #'not test-form) forms))

(defmacro dotimes ((var count-form . result-form?) . body-forms)
  "Cf. Common Lisp's DOTIMES."
  (flet ((dotimes* (n #'body #'result)
           (let ((#'i (box 0)))
             (while (< (i) n)
               (body (i))
               (i (+ (i) 1)))
             (result (i)))))
    (list #'dotimes*
          count-form
          (list* #'lambda (list var) body-forms)
          (list* #'lambda (list var) result-form?))))

(defmacro loop-let (name initializers . forms)
  "Labelled recursive loop, analogous to Scheme's named `let'.
Lexically bind a function named NAME with one PARAMETER for every
INITIALIZER and the FORMS as body.  Then immediately apply the
function to a list containing one VALUE for every INITIALIZER and
return the result.  The function is bound per `labels' so it can
recursively refer to itself.
$(syntax initializer (parameter value))"
  (list #'labels (list (list* name (mapcar #'car initializers) forms))
        (list* name (mapcar #'cadr initializers))))

(defexpr block (block-name . forms) env
  "Establish a block named BLOCK-NAME and evaluate the FORMS as an
implicit `progn' inside it.  The forms may use `return-from' to
nonlocally exit from the block.
Note that unlike in Common Lisp, there is no separate namespace for
block names; a block is named in the normal variable namespace."
  (let ((tag (list #void))) ; cons up a fresh object as tag
    (flet ((escape (value) (throw tag value)))
      (catch tag
        (eval (list (list* #'lambda (list block-name) forms)
                    #'escape)
              env)))))

(defun return-from (#'block-name . value?)
  "Abort evaluation and return the optional VALUE? (which defaults to
void) from the block named BLOCK-NAME.  It is an error to return from
a block whose dynamic extent has ended.
$(fn (block-name . value?))"
  (block-name (optional value?)))

(defmacro unwind-protect (protected-form . cleanup-forms)
  "Evaluate the PROTECTED-FORM and return its result.  Regardless of
whether the protected form returns normally, or via a nonlocal exit,
the CLEANUP-FORMS are evaluated after the protected form.  Note that
the protected forms are not evaluated in case of `panic'."
  (list #'%unwind-protect protected-form (list* #'progn cleanup-forms)))

(defexpr prog1 (form . forms) env
  "Evaluate FORM and any additional FORMS, and return the result of FORM."
  (let ((result (eval form env)))
    (eval (list* #'progn forms) env)
    result))

(defun lispx::make-typecase-with-default-function (#'default)
  "Metaprogramming utility used to create `typecase' and `etypecase'.
If no matching clause is found, the DEFAULT function is called with
the key."
  (vau (keyform . clauses) env
    (let ((key (eval keyform env)))
      (loop-let -typecase- ((clauses clauses))
        (if (null clauses)
            (default key)
            (let ((((class-name . forms) . rest-clauses) clauses))
              (if (typep key (find-class class-name env))
                  (eval (list* #'progn forms) env)
                  (-typecase- rest-clauses))))))))

(def #'typecase (lispx::make-typecase-with-default-function
                 (lambda (#ignore) #void))
  "Multi-armed type test.
Evaluate the KEYFORM.  Go through the CLAUSES.  If the result of
evaluating KEYFORM is an instance of the class named by CLASS-NAME,
evaluate the FORMS as an implicit `progn'.  Otherwise go to the next
clause, or return void if there are no more clauses.
$(type fexpr)
$(fn (key . clauses))
$(syntax clause (class-name . forms))")

(def #'etypecase (lispx::make-typecase-with-default-function
                  ;; Note: we use #^object as :expected-type of the
                  ;; type error which is somewhat nonsensical.  The
                  ;; proper/CL way would be to use an OR type spec,
                  ;; but they might get removed from the language.
                  (lambda (key) (error (make-type-error key #^object))))
  "Like `typecase' but signal a `type-error' if no clause matches the key.
$(type fexpr)
$(fn (key . clauses))
$(syntax clause (class-name . forms))")

(defexpr set (environment definiend-tree value) dynamic-environment
  "Match the DEFINIEND-TREE against the VALUE in the ENVIRONMENT,
creating or updating existing bindings."
  (eval (list #'def definiend-tree
              (list (unwrap #'eval) value dynamic-environment))
        (eval environment dynamic-environment)))

(defun box initial-value?
  "A box is a function that encapsulates a mutable value.  Create a
new box with the optional INITIAL-VALUE?.  Calling the box without
arguments returns the value.  Calling the box with an argument sets
the value."
  (def value (optional initial-value?))
  (def env (the-environment))
  (lambda new-value?
    (if-option (new-value new-value?)
      (set env value new-value)
      value)))

(defun assert (boolean)
  "Signal an error if the BOOLEAN is false.  Otherwise return void."
  (unless boolean (error (make-instance (class assertion-error)))))

;;; Lists

(defun null (object)
  "Return true if the OBJECT is nil, false otherwise."
  (eq object #nil))

(defun caar (cons)
  "Return the `car' of the `car' of the CONS."
  (car (car cons)))

(defun cadr (cons)
  "Return the `car' of the `cdr' of the CONS."
  (car (cdr cons)))

(defun cdar (cons)
  "Return the `cdr' of the `car' of the CONS."
  (cdr (car cons)))

(defun cddr (cons)
  "Return the `cdr' of the `cdr' of the CONS."
  (cdr (cdr cons)))

(defun append (list1 list2)
  "Append two lists.  The first one must be proper and is copied.  The
second one is not copied (and doesn't even have to be a list). It
becomes the `cdr' of the final cons of the first list, or is returned
directly if the first list is empty."
  (%append list1 list2))

(defun nth (n list)
  "Return element number N of LIST, where the `car' is element zero."
  (%nth n list))

(defun nthcdr (n list)
  "Returns the tail of LIST that would be obtained by calling `cdr' N
times in succession."
  (%nthcdr n list))

(defun mapcar (#'function list)
  "Create a new list by applying the FUNCTION to every element of the LIST."
  (if (null list)
      #nil
      (cons (function (car list)) (mapcar #'function (cdr list)))))

(defun mapc (#'function list)
  "Apply the FUNCTION to every element of the LIST for effect.  Return the list."
  (unless (null list)
    (function (car list))
    (mapc #'function (cdr list)))
  list)

(defmacro dolist ((var list-form . result-form?) . body-forms)
  "Cf. Common Lisp's DOLIST."
  (labels ((dolist* (list #'body #'result)
             (if (null list)
                 (result list)
                 (progn
                   (body (car list))
                   (dolist* (cdr list) #'body #'result)))))
    (list #'dolist*
          list-form
          (list* #'lambda (list var) body-forms)
          (list* #'lambda (list var) result-form?))))

(defun reduce (#'function list :initial-value initial-value)
  "Use the binary FUNCTION to combine the elements of the LIST.  The
INITIAL-VALUE is logically placed before the list."
  (if (null list)
      initial-value
      (reduce #'function (cdr list) :initial-value (function initial-value (car list)))))

(defun memberp (element list :test #'test)
  "Return true if the ELEMENT is contained in the LIST according to
the TEST predicate, false otherwise."
  (if (null list)
      #f
      (if (test element (car list))
          #t
          (memberp element (cdr list) :test #'test))))

(defun remove-if (#'test list)
  "Return a new list from which the elements that satisfy the TEST
have been removed."
  (if (null list)
      #nil
      (if (test (car list))
          (remove-if #'test (cdr list))
          (cons (car list) (remove-if #'test (cdr list))))))

(defun get? (plist indicator)
  "Search for the INDICATOR keyword in the property list PLIST (a list
of alternating keywords and values) and return the found value as an
option."
  (if (null plist)
      #nil
      (let (((i v . plist) plist))
        (if (eq i indicator)
            (some v)
            (get? plist indicator)))))

;;; Relational Operators

;; Note that unlike in Common Lisp, these operators currently require
;; at least two arguments.  This will be improved in the future.

(defun lispx::relational-operator (#'binary-operator)
  "Utility to create an n-ary relational operator from a BINARY-OPERATOR."
  (labels ((operator (arg1 arg2 . rest)
             (if (binary-operator arg1 arg2)
                 (if (null rest)
                     #t
                     (apply #'operator (list* arg2 rest)))
                 #f)))
    #'operator))

(def #'= (lispx::relational-operator #'%=)
  "Return true if all ARGUMENTS are equal, false otherwise.
$(fn arguments)
$(type function)")

(def #'< (lispx::relational-operator #'%<)
  "Return true if the ARGUMENTS are in monotonically increasing order,
false otherwise.
$(fn arguments)
$(type function)")

(def #'> (lispx::relational-operator #'%>)
  "Return true if the ARGUMENTS are in monotonically decreasing order,
false otherwise.
$(fn arguments)
$(type function)")

(def #'<= (lispx::relational-operator #'%<=)
  "Return true if the ARGUMENTS are in monotonically nondecreasing
order, false otherwise.
$(fn arguments)
$(type function)")

(def #'>= (lispx::relational-operator #'%>=)
  "Return true if the ARGUMENTS are in monotonically nonincreasing
order, false otherwise.
$(fn arguments)
$(type function)")

(defun /= (arg . args)
  "Return true if no two ARGUMENTS are the same, false otherwise.
$(fn arguments)"
  (if (null args)
      #t
      (if (memberp arg args :test #'=)
          #f
          (apply #'/= args))))

;;; Numbers

;; The terms thetic (for + and *) and lytic (for - and /) are due to Hankel.

(defun lispx::thetic-operator (#'binary-operator initial-value)
  "Utility to create an n-ary thetic operator from a BINARY-OPERATOR and INITIAL-VALUE."
  (lambda args
    (reduce #'binary-operator args :initial-value initial-value)))

(def #'+ (lispx::thetic-operator #'%+ 0)
  "Return the sum of the ARGUMENTS, or 0 if no arguments are supplied.
$(fn arguments)
$(type function)")

(def #'* (lispx::thetic-operator #'%* 1)
  "Return the product of the ARGUMENTS, or 1 if no arguments are supplied.
$(fn arguments)
$(type function)")

(defun lispx::lytic-operator (#'binary-operator initial-value)
  "Utility to create an n-ary lytic operator from a BINARY-OPERATOR and INITIAL-VALUE."
  (lambda (arg1 . rest)
    (if (null rest)
        (binary-operator initial-value arg1)
        (reduce #'binary-operator rest :initial-value arg1))))

(def #'- (lispx::lytic-operator #'%- 0)
  "If only one number is supplied in the ARGUMENTS, return the
negation of that number. If more than one number is supplied, subtract
all of the later ones from the first one and return the result.
$(fn arguments)
$(type function)")

(def #'/ (lispx::lytic-operator #'%/ 1)
  "If only one number is supplied in the ARGUMENTS, return the
reciprocal of that number.  If more than one number is supplied,
divide the first one by all of the later ones and return the result.
$(fn arguments)
$(type function)")

;;; Classes

(defmacro class (name)
  "Access a class by the (unevaluated) NAME symbol in the current
environment.  This is required because classes have their own
namespace."
  (class-symbol name))

(defun find-class (name environment)
  "Look up a class based on its NAME symbol (evaluated) in the given ENVIRONMENT."
  (eval (class-symbol name) environment))

(defun class-name (class)
  "Return the name symbol of the CLASS."
  (%class-name class))

(defun subclassp (class superclass)
  "Return true if the CLASS is a subclass of the SUPERCLASS, false otherwise.
A class is considered a subclass of itself."
  (%subclassp class superclass))

(defexpr defclass (name superclass? slot-specs . properties) env
  "Define a new `standard-class' with the given NAME, optional
SUPERCLASS?, and SLOT-SPECS.  The superclass defaults to
`standard-object'.  The SLOT-SPECS and PROPERTIES are currently
ignored.
$(syntax slot-spec symbol)
$(syntax property (:documentation docstring))"
  (def superclass (find-class (optional superclass? 'standard-object) env))
  ;; Slot-specs are ignored for now, but check them nevertheless.
  (dolist (slot-spec slot-specs) (the symbol slot-spec))
  (def class-name (class-symbol name))
  (if (boundp class-name env)
      (%reinitialize-standard-class (eval class-name env) superclass)
      (eval (list #'def class-name (%make-standard-class name superclass)) env))
  name)

;;; Generic Functions

(defexpr defgeneric (name (receiver . parameters) . properties) env
  "Define a new generic function with the given NAME.  The RECEIVER,
PARAMETERS, and PROPERTIES are currently ignored.
$(syntax property (:documentation docstring))"
  (def #'generic (lambda args (apply (%find-method (class-of (car args)) name) args)))
  (eval (list #'def (function-symbol name) #'generic) env)
  name)

(defexpr defmethod (name ((receiver class-name) . parameters) . forms) env
  "Add a new method to the generic function named by NAME specialized
for the class named by CLASS-NAME."
  (def #'method (eval (list* #'lambda (list* receiver parameters) forms) env))
  (%add-method (find-class class-name env) name #'method)
  name)

;;; Standard Objects

(defun make-instance (class . slot-inits)
  "Create a new instance of CLASS (that must be a `standard-class').
The SLOT-INITS must be of even length, and alternately contain slot
names (symbols, typically keywords) and values."
  (apply #'%make-instance (cons class slot-inits)))

(defun slot-value (object slot-name)
  "Return the value of the slot named SLOT-NAME of the OBJECT."
  (%slot-value object slot-name))

(defun set-slot-value (object slot-name value)
  "Set the value of the slot named SLOT-NAME of the OBJECT to VALUE."
  (%set-slot-value object slot-name value))

(defun slot-bound-p (object slot-name)
  "Return true if the slot named SLOT-NAME of the OBJECT is set, false otherwise."
  (%slot-bound-p object slot-name))

;;; Type Checks

(defun make-type-error (datum expected-type)
  "Create a `type-error' with the given DATUM and EXPECTED-TYPE."
  (make-instance (class type-error) :datum datum :expected-type expected-type))

(defun assert-type (object class)
  "Signal a `type-error' if the OBJECT is not an instance of the CLASS."
  (if (typep object class)
      object
      (error (make-type-error object (class-name class)))))

(defexpr the (class-name object) env
  "Shorthand for `assert-type'.  Signal a `type-error' if the OBJECT
is not an instance of the class named by CLASS-NAME."
  (assert-type (eval object env) (find-class class-name env)))

;;; Sequences

(defgeneric length (sequence)
  (:documentation "Return the number of elements in a sequence."))

(defmethod length ((seq list))
  (%list-length seq))

(defgeneric elt (sequence index)
  (:documentation "Return the sequence element at the specified index."))

(defmethod elt ((seq list) index)
  (nth index seq))

(defgeneric subseq (sequence start . end?)
  (:documentation "Create a sequence that is a copy of the subsequence
of the SEQUENCE bounded by START and optional END?.  If END?  is not
supplied or void, the subsequence stretches until the end of the
list."))

(defmethod subseq ((seq list) start . end?)
  (%list-subseq seq start (optional end?)))

(defmethod subseq ((seq string) start . end?)
  (%string-subseq seq start (optional end?)))

;;; Options

;; An option is either nil ("none"), or a one-element list ("some").
;; Variables holding options are conventionally suffixed with "?".

(defun some (value)
  "Create a one-element list from the VALUE."
  (list value))

(defexpr if-option ((name option?) then else) env
  "Destructure the OPTION?.  If it's non-nil, evaluate the THEN form
with the NAME bound to the contents of the option.  If it's nil,
evaluate the ELSE form."
  ;; (Idea from Taylor R. Campbell's blag.)
  (let ((o? (eval option? env)))
    (if (null o?)
        (eval else env)
        (eval (list (list #'vau (list name) #ignore then)
                    (car o?))
              env))))

(defmacro when-option ((name option?) . forms)
  "Destructure the OPTION?.  If it's non-nil, evaluate the FORMS with
the NAME bound to the contents of the option.  If it's nil, return nil."
  (list #'if-option (list name option?) (list* #'progn forms) #nil))

(defmacro unless-option (option? . forms)
  "Destructure the OPTION?.  If it's nil, evaluate the FORMS.  If it's
non-nil, return nil."
  (list #'if-option (list #ignore option?) #nil (list* #'progn forms)))

(defexpr optional (option? . default?) env
  "Return the contents of the OPTION?, or the DEFAULT? if the option
is nil.  The default itself defaults to void.  The DEFAULT? is
evaluated lazily, only when the OPTION? is nil."
  (if-option (value (eval option? env))
    value
    (if-option (default default?)
      (eval default env)
      #void)))

(defun optionals (list . defaults)
  "Similar to `optional', but provides DEFAULTS for any number of
elements of LIST.
Currently, the DEFAULTS are always evaluated, but in the future, they
might be evaluated lazily, so they should not be used for effect."
  (loop-let -optionals- ((list list) (defaults defaults))
    (if (null list)
        (if (null defaults)
            #nil
            (cons (car defaults) (-optionals- #nil (cdr defaults))))
        (if (null defaults)
            (cons (car list)     (-optionals- (cdr list) #nil))
            (cons (car list)     (-optionals- (cdr list) (cdr defaults)))))))

(defun get-option (option?)
  "Returns the contents of the OPTION? or signals an error if it is nil."
  (optional option? (simple-error "Option is nil")))

;;; Dynamic Binding

(defexpr defdynamic (name . value-and-docstring?) env
  "Define a new or update an existing dynamic variable with the given
NAME and optional default VALUE. The optional DOCSTRING is currently
ignored.
$(fn (name &optional value docstring))"
  (def value (eval (optional value-and-docstring?) env)) ; treating 2-elt list as option
  (if (boundp name env)
      (set-dynamic (eval name env) value)
      (eval (list #'def name (make-instance (class dynamic) :value value)) env)))

(defun dynamic (dynamic-variable)
  "Return the current value of the DYNAMIC-VARIABLE."
  (slot-value dynamic-variable 'value))

(defun set-dynamic (dynamic-variable value)
  "Set the current value of the DYNAMIC-VARIABLE."
  (set-slot-value dynamic-variable 'value value))

(defexpr dynamic-let (bindings . forms) env
  "Evaluate the FORMS with the dynamic variables specified by BINDINGS
temporarily bound to new values.  Bindings are established parallely
as per `let'.
$(syntax binding (dynamic-variable value))"
  (let ((dynamics (mapcar (lambda ((name #ignore)) (eval name env)) bindings))
        (values (mapcar (lambda ((#ignore value)) (eval value env)) bindings))
        (thunk (eval (list* #'lambda () forms) env)))
    (%progv dynamics values thunk)))

(defmacro dynamic-let* (bindings . forms)
  "Evaluate the FORMS with the dynamic variables specified by BINDINGS
temporarily bound to new values.  Bindings are established serially as
per `let*'."
  (if (null bindings)
      (list* #'progn forms)
      (list #'dynamic-let (list (car bindings))
            (list* #'dynamic-let* (cdr bindings) forms))))

(defmacro progv (dynamic-variables values . forms)
  "Evaluate the FORMS with the list of DYNAMIC-VARIABLES temporarily
bound to new VALUES.  The DYNAMIC-VARIABLES and VALUES lists must have
the same length."
  (list #'%progv dynamic-variables values (list* #'lambda () forms)))

;;; Delimited Control Operators

;; These operators follow the API put forth in the delimcc library
;; at URL `http://okmij.org/ftp/continuations/implementations.html'.

(defmacro push-prompt (prompt . forms)
  "Push the PROMPT and evaluate the FORMS inside the prompt.  This
delimits the continuation."
  (list #'%push-prompt prompt (list* #'lambda () forms)))

(defmacro take-subcont (prompt name . forms)
  "Abort outwards to the PROMPT.  When the prompt is reached, evaluate
the FORMS with NAME bound to the captured continuation (which does not
include the prompt)."
  (list #'%take-subcont prompt (list* #'lambda (list name) forms)))

(defmacro push-delim-subcont (prompt continuation . forms)
  "Push the PROMPT and compose the previously captured CONTINUATION
inside it.  The FORMS are then evaluated inside the new continuation."
  (list #'%push-delim-subcont prompt continuation (list* #'lambda () forms)))

(defmacro push-subcont-barrier forms
  "Push a continuation barrier that prevents the FORMS from capturing
any continuations to the outside."
  (list #'%push-subcont-barrier (list* #'lambda () forms)))

(defconstant +default-prompt+ 'default-prompt
  "This prompt is used for general coroutine-like use of continuations.")
