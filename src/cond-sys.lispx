;;;                                                     -*- Lisp -*-
;;; LispX Condition System
;;;

;; Copyright (c) 2021, 2022 Manuel J. Simoni

;; This file implements a condition system in the style of Common
;; Lisp.
;;
;; Implementation Notes
;; --------------------
;;
;; Condition handling and restart handling share some similarities
;; while also being quite different in other respects.
;;
;; The main similarities between condition and restart handling are:
;;
;; * Both condition and restart handlers are arranged in
;;   dynamically-bound handler chains, consisting of individual
;;   handler frames.  Each frame binds a number of handlers.  We use
;;   two dynamic variables, `*condition-handler-frame?*' and
;;   `*restart-handler-frame?*', to point at the innermost frame of
;;   each chain.  Note that the variables hold options, as indicated
;;   by the question mark.
;;
;; * Signalling a condition and invoking a restart are very similar
;;   operations, in that a handler is looked up in the chain, and
;;   then its handler function is invoked.
;;
;; The main differences:
;;
;; * Conditions are classes organized in a type hierarchy
;;   (e.g. `type-error' as subtype of `error'), whereas restarts are
;;   plain names (e.g. `abort' and `continue').
;;
;; * A condition handler function always receives only a single
;;   argument, the condition, whereas a restart handler function
;;   receives any number of arguments passed to `invoke-restart'.
;;
;; * A condition handler function may decline handling a condition by
;;   returning normally instead of performing a nonlocal exit; this
;;   causes the search for a handler to continue.  In contrast, if a
;;   restart handler function returns normally, the restart is
;;   considered handled, and its result value is returned from
;;   `invoke-restart'.
;;
;; * A restart handler may optionally have an interactive function
;;   that prompts the user for arguments when the restart is invoked
;;   by `invoke-restart-interactively'.
;;
;; * A restart handler may optionally be associated with a list of
;;   conditions, to tell apart restarts belonging to different,
;;   concurrently signalled conditions.
;;
;; We follow the Common Lisp condition system quite closely (including
;; details like the condition firewall), with some minor differences:
;;
;; 1) For simplicity, the syntaxes of `handler-case' and
;;    `restart-case' are equal to the syntaxes of the lower-level
;;    `handler-bind' and `restart-bind' functions.  There is no extra
;;    "user interface" processing for the higher-level functions.
;;
;;    Likewise, `signal' and `error' do not support creating simple
;;    conditions from formatting strings and arguments, you must
;;    always pass in a fully formed condition yourself.
;;
;; 2) There is no `with-condition-restarts'.  Instead there is an
;;    additional keyword, `:associated-conditions', in the
;;    handler-specs of `restart-bind' and `restart-case' that
;;    establishes the associations.
;;
;;    Alternatively, `signal' and `error' also support the
;;    establishment of restart handlers associated with the signalled
;;    condition.
;;
;;    A call to `signal' (or `error') with restart handler specs like:
;;
;;    (signal some-condition
;;      (continue (lambda () ...)))
;;
;;    is equivalent to:
;;
;;    (restart-case ((continue (lambda () ...) :associated-conditions (list some-condition)))
;;      (signal some-condition))
;;
;; 3) Every restart must have a non-nil name; anonymous restarts
;;    are not supported.

(defclass handler-frame ()
  (handlers
   parent-frame?)
  (:documentation "Instances of this class make up the condition and
restart handler chains.  Each frame stores a list of HANDLERS and an
optional PARENT-FRAME?."))

(defclass condition-handler ()
  (condition-class
   handler-function)
  (:documentation "A condition handler is handling a particular
CONDITION-CLASS (can be `object' to handle all conditions).  The
HANDLER-FUNCTION receives a signalled condition as its single
argument."))

(defclass restart-handler ()
  (restart-name
   handler-function
   interactive-function?
   associated-conditions)
  (:documentation "A restart handler is handling a particular
RESTART-NAME.  The HANDLER-FUNCTION receives the arguments passed to
`invoke-restart'.  The optional INTERACTIVE-FUNCTION? is called by
`invoke-restart-interactively' and should prompt the user for required
arguments.  The ASSOCIATED-CONDITIONS are a list of conditions with
which this handler is associated.  If the list is empty, the handler
is applicable to any condition.  If it's not empty, the handler is
applicable only to conditions in the list."))

(defdynamic *condition-handler-frame?* #nil
  "An option holding the innermost condition handler frame.")

(defdynamic *restart-handler-frame?* #nil
  "An option holding the innermost restart handler frame.")

(defun lispx::make-handler-bind-operator (#'handler-spec-parser handler-frame-dynamic)
  "Metaprogramming utility to create `handler-bind' and `restart-bind'.
It is parameterized by a function that parses the handler
specifications of the `handler-bind' and `restart-bind' forms and
produces handlers from them, as well as the dynamic variable holding
the handler chain (the variable itself as a first class object, not
its value, so it can be used with `progv')."
  (vau (handler-specs . forms) env
    (let ((handler-frame (make-instance
                          #^handler-frame
                          :handlers (mapcar (lambda (spec)
                                              (handler-spec-parser spec env))
                                            handler-specs)
                          :parent-frame? (dynamic handler-frame-dynamic))))
      (progv (list handler-frame-dynamic) (list (some handler-frame))
        (eval (list* #'progn forms) env)))))

(def #'handler-bind
  (lispx::make-handler-bind-operator
   (lambda ((class-name function-form) env)
     (make-instance #^condition-handler
                    :condition-class
                    (the class (find-class class-name env))
                    :handler-function
                    (the function (eval function-form env))))
   *condition-handler-frame?*)
  "Establish condition handlers specified by HANDLER-SPECS around FORMS.
$(type fexpr)
$(fn (handler-specs . forms))
$(syntax handler-spec (condition-class handler-function))")

(def #'restart-bind
  (lispx::make-handler-bind-operator
   (lambda ((restart-name function-form . properties) env)
     (make-instance #^restart-handler
                    :restart-name
                    (the symbol restart-name)
                    :handler-function
                    (the function (eval function-form env))
                    :interactive-function?
                    (when-option (i-f-form (get? properties :interactive-function))
                      (some (the function (eval i-f-form env))))
                    :associated-conditions
                    (when-option (a-cs-form (get? properties :associated-conditions))
                      (the list (eval a-cs-form env)))))
   *restart-handler-frame?*)
  "Establish restart handlers specified by HANDLER-SPECS around FORMS.
You should usually prefer `restart-case'.
$(type fexpr)
$(fn (handler-specs . forms))
$(syntax handler-spec (restart-name handler-function . properties))
$(syntax properties (&key interactive-function associated-conditions))")

(defun lispx::make-handler-case-operator (#'handler-bind-operator)
  "Metaprogramming utility to create `handler-case' / `restart-case'
from `handler-bind' / `restart-bind'.  The `*-case' operators unwind
the stack before a handler is called.  We do this with an outer exit
and an inner trampoline, both wrapped around the original `*-bind'
operator.  The original form's handler functions are replaced with
functions that use the trampoline.  If a condition is signalled / a
restart is invoked during the evaluation of the body forms, they
unwind the stack by jumping into the trampoline, and call the original
handler function there.  If no condition is signalled / no restart is
invoked, we return from the outer exit, ignoring the trampoline."
  (vau (handler-specs . forms) env
    (block exit
      ((block trampoline
         (eval (list #'handler-bind-operator
                     (mapcar (lambda ((name function-form . properties))
                               (list* name
                                      (lambda args
                                        (return-from trampoline
                                                     (lambda ()
                                                       (apply (eval function-form env) args))))
                                      properties))
                             handler-specs)
                     (list #'return-from exit (list* #'progn forms)))
               env))))))

(def #'handler-case (lispx::make-handler-case-operator #'handler-bind)
  "Like `handler-bind', but the stack is unwound before a handler function is called.
$(type fexpr)
$(fn (handler-specs . forms))")

(def #'restart-case (lispx::make-handler-case-operator #'restart-bind)
  "Like `restart-bind', but the stack is unwound before a handler function is called.
$(type fexpr)
$(fn (handler-specs . forms))")

(defun lispx::signal-impl (condition)
  "Utility to signal the CONDITION.  If the signal is unhandled,
return void.  See `signal'."
  (loop-let -signal- ((handler-frame? (dynamic *condition-handler-frame?*)))
    ;; Payload to `lispx::find-handler?' is always nil for condition handlers.
    (if-option ((handler frame) (lispx::find-handler? condition handler-frame? #nil))
      (progn
        ;; Handler found; call it, passing along frame.
        (lispx::call-condition-handler handler frame condition)
        ;; Signal unhandled: continue search for handlers.
        (-signal- (slot-value frame 'parent-frame?)))
      ;; No handler found, return void.
      #void)))

(defun lispx::call-condition-handler (handler handler-frame condition)
  "Call a condition HANDLER's handler function with the given
CONDITION.  During the call, the condition handler chain gets swapped
to that chain that was active at the time the handler was established.
This is the so-called \"condition firewall\".  The chain gets passed
in as the value of HANDLER-FRAME."
  (dynamic-let ((*condition-handler-frame?* (slot-value handler-frame 'parent-frame?)))
    (lispx::apply-handler-function handler (list condition))))

(defun lispx::apply-handler-function (handler arguments)
  "Utility to call a condition or restart HANDLER's handler function
with a list of ARGUMENTS."
  (apply (slot-value handler 'handler-function) arguments))

(defun lispx::error-impl (condition)
  "Utility to signal the CONDITION.  If the condition is unhandled,
invoke the debugger.  Therefore never returns normally.  See `error'."
  (signal condition)
  (invoke-debugger condition))

(defun invoke-debugger (condition)
  "Invoke the debugger, which currently just means panicking."
  (panic condition))

(defun lispx::make-signal-with-restarts-operator (#'signal-operator)
  "Metaprogramming utility to create the `signal' / `error' operators
that take restart handler-specs from the `lispx::signal-impl' /
`lispx::error-impl' ones that don't."
  (vau (condition . handler-specs) env
    (let ((c (eval condition env)))
      (flet ((append-associated-condition (handler-spec)
               (append handler-spec (list :associated-conditions (list #'list c)))))
        (eval (list #'restart-case (mapcar #'append-associated-condition handler-specs)
                    (list #'signal-operator c))
              env)))))

(def #'signal (lispx::make-signal-with-restarts-operator #'lispx::signal-impl)
  "Signal the CONDITION.  If the signal is unhandled, return void.
Restart handlers that are associated with the condition can be bound
as per `restart-case'.  The handlers should not specify the
`:associated-conditions' property, as it will be set automatically.
$(type fexpr)
$(fn (condition . handler-specs))")

(def #'error (lispx::make-signal-with-restarts-operator #'lispx::error-impl)
  "Signal the CONDITION.  If the condition is unhandled, invoke the
debugger.  Therefore never returns normally.
Restart handlers that are associated with the condition can be bound
as per `restart-case'.  The handlers should not specify the
`:associated-conditions' property, as it will be set automatically.
$(type fexpr)
$(fn (condition . handler-specs))")

(defun invoke-restart (restart-designator . arguments)
  "Invoke the restart designated by RESTART-DESIGNATOR, which can be a
symbol or a `restart-handler', with the given ARGUMENTS.  Signal an
error if the restart is not found."
  (lispx::invoke-restart-with-arguments-producing-function
   restart-designator
   (lambda (#ignore) arguments)))

(defun invoke-restart-interactively (restart-designator)
  "Invoke the restart designated by RESTART-DESIGNATOR, which can be a
symbol or a `restart-handler', by prompting the user for arguments via
the restart's optional interactive function.  Signal an error if the
restart is not found."
  (lispx::invoke-restart-with-arguments-producing-function
   restart-designator
   (lambda (restart-handler)
     (when-option (#'i-f (slot-value restart-handler 'interactive-function?))
       (i-f)))))

(defun lispx::invoke-restart-with-arguments-producing-function (restart-designator #'function)
  "Utility to invoke the restart designated by RESTART-DESIGNATOR,
which can be a symbol or a `restart-handler', with an arguments list
produced by FUNCTION (which receives a `restart-handler' as argument)."
  (etypecase restart-designator
    (symbol
     (if-option (restart-handler (find-restart? restart-designator))
       (lispx::apply-handler-function restart-handler (function restart-handler))
       (error (make-restart-error restart-designator))))
    (restart-handler
     (lispx::apply-handler-function restart-designator (function restart-designator)))))

(defun lispx::find-handler? (object handler-frame? payload?)
  "Utility to find both condition handlers and restart handlers.
The OBJECT can be either a condition or a restart name.  The
HANDLER-FRAME is the handler frame where the search should start
(always the innermost handler frame at the start of the search).

Return an option of the found handler and the frame establishing it as
a two-element list.  The frame is needed so that we can access its
parent in the implementation of the condition firewall (see
`lispx::call-condition-handler').

The PAYLOAD? parameter can be used to pass in an optional condition if
we are looking for a restart handler (see `find-restart?').  If we are
looking for a condition handler, it is always nil."
  (when-option (handler-frame handler-frame?)
    (block found
      (dolist (handler (slot-value handler-frame 'handlers))
        (when (lispx::handler-applicable-p handler object payload?)
          (return-from found (some (list handler handler-frame)))))
      (lispx::find-handler? object (slot-value handler-frame 'parent-frame?) payload?))))

(defun find-restart? (name . condition?)
  "Find a restart handler by NAME, optionally limited to restarts
associated with a particular CONDITION?."
  (when-option ((handler #ignore) (lispx::find-handler?
                                   name
                                   (dynamic *restart-handler-frame?*)
                                   condition?))
    (some handler)))

(defgeneric lispx::handler-applicable-p (handler object payload?)
  (:documentation "Return true if a condition or restart HANDLER is
applicable, false otherwise.  The OBJECT can be a condition or a
restart name.  The PAYLOAD? is only used for restart handlers, and
always nil for condition handlers."))

(defmethod lispx::handler-applicable-p ((handler condition-handler) condition #nil)
  "A condition handler is applicable if the condition is an instance
of its condition class."
  (typep condition (slot-value handler 'condition-class)))

(defmethod lispx::handler-applicable-p ((handler restart-handler) restart-name condition?)
  "A restart handler is applicable to a restart name and optional condition..."
  ;; ...if the restart name matches the handler's restart name, and...
  (and (eq restart-name (slot-value handler 'restart-name))
       ;; ...the handler is applicable to the condition.
       (lispx::restart-handler-applicable-to-condition-p handler condition?)))

(defun lispx::restart-handler-applicable-to-condition-p (handler condition?)
  "A restart handler is applicable to an optional condition..."
  (if-option (condition condition?)
    ;; ...if we are looking for restarts associated with a
    ;; particular condition...
    (let ((a-cs (slot-value handler 'associated-conditions)))
      (if (null a-cs)
          ;; ...if the restart handler is not associated with
          ;; particular conditions,...
          #t
          ;; ...or if the condition we are looking is one of the
          ;; handler's associated conditions.
          (memberp condition a-cs :test #'eq)))
    ;; ...if we are not looking for restarts associated with a
    ;; particular condition then every handler is applicable.
    #t))

(defun compute-restarts condition?
  "Return the list of currently active restarts, with most recently
established ones first, optionally limited to those that are
explicitly associated with the supplied CONDITION? or not associated
with any condition."
  (loop-let -compute-restarts- ((restarts '())
                                (handler-frame? (dynamic *restart-handler-frame?*)))
    (if-option (handler-frame handler-frame?)
      (-compute-restarts- (append restarts
                                  (remove-if
                                   (lambda (restart)
                                     (not (lispx::restart-handler-applicable-to-condition-p
                                           restart condition?)))
                                   (slot-value handler-frame 'handlers)))
                          (slot-value handler-frame 'parent-frame?))
      restarts)))

(defclass restart-error (error)
  (restart-name)
  (:documentation "Signalled when no handler for RESTART-NAME is found."))

(defun make-restart-error (restart-name)
  "Create a new `restart-error' for the given RESTART-NAME."
  (make-instance #^restart-error :restart-name restart-name))

(defclass simple-error (error)
  (message)
  (:documentation "Class for simple errors with a MESSAGE."))

(defun make-simple-error (message)
  "Create a new simple error with a MESSAGE."
  (make-instance #^simple-error :message message))

(defun simple-error (message)
  "Signal a simple error with a MESSAGE."
  (error (make-simple-error message)))
