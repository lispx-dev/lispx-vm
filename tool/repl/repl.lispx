;;;                                                     -*- Lisp -*-
;;; LispX REPL
;;;

(defconstant repl:+environment+ (the-environment)
  "The environment in which REPL expressions are evaluated.")

(defdynamic repl:*debug-level* 0
  "Current debug level.  0 if we are not in the debugger.")

(defun repl:run ()
  "Run a REPL."
  (loop
    ;; The internal REPL-ABORT restart causes the loop to begin from
    ;; the start again.  The user actually uses ABORT, described
    ;; below.
    (restart-case ((repl-abort (lambda () #| nothing to do here, just unwind |#)))
      (repl:%set-debug-level (dynamic repl:*debug-level*))
      (fresh-line)
      (print (eval (read) repl:+environment+)))))

(defun repl:run-debugger-loop (condition k)
  "Run a debug REPL.  Prints a banner and then runs a normal REPL."
  (uprint "> Debugger invoked on condition")
  (failsafe-print condition)
  (uprint "> Available restarts -- use (invoke-restart 'name ...) to invoke:")
  (mapc (lambda (restart)
          ;; Don't print our internal REPL-ABORT restart.
          (unless (eq (slot-value restart 'restart-name) 'repl-abort)
            (print (slot-value restart 'restart-name))))
        (compute-restarts condition))
  (uprint "> Backtrace:")
  (%print-stacktrace k)
  (repl:run))

(def #'failsafe-to-string (to-lisp-function (js-global "String"))
  "A safe way to turn any JS object into a (JS) string.")

(defun failsafe-print (obj)
  "Print any object, incl. JS objects, as usefully as possible while
never failing."
  (if (eq (class-of condition) #^object)
      (uprint (to-lisp-string (failsafe-to-string condition)))
      (print condition)))

;; Overwrite built-in `invoke-debugger'.  This gets called for all
;; unhandled conditions.
(defun invoke-debugger (condition)
  ;; Immediately grab the stack trace, so we don't include any of the
  ;; below frames in it.
  (take-subcont +root-prompt+ k
    (push-delim-subcont +root-prompt+ k
      ;; Increase debug level.
      (dynamic-let ((repl:*debug-level* (+ (dynamic repl:*debug-level*) 1)))
        (repl:%set-debug-level (dynamic repl:*debug-level*))
        ;; We use a system of two restarts to abort.  The user invokes
        ;; the ABORT restart to break out of a nested debug level.
        ;; Internally this invokes the REPL-ABORT restart which lands
        ;; us back in the containing REPL, see `repl:run'.  This
        ;; two-restart approach is needed because otherwise REPL-ABORT
        ;; would land the user back in the debug loop they came from.
        ;; Maybe there's a simpler solution but I haven't found one.
        (restart-case ((abort (lambda () (invoke-restart 'repl-abort))))
          ;; Add some extra restarts to `unbound-symbol-error' because
          ;; it demos well and makes designers of other languages
          ;; squirt blood from their eyes.
          (typecase condition
            (unbound-symbol-error
             (let ((symbol (slot-value condition 'symbol))
                   (env (slot-value condition 'environment)))
               (restart-case ((continue (lambda () (eval symbol env))
                                        :associated-conditions (list condition))
                              (use-value (lambda (value) value)
                                         :associated-conditions (list condition))
                              (store-value (lambda (value) (eval (list #'def symbol value) env))
                                           :associated-conditions (list condition)))
                 (repl:run-debugger-loop condition k))))
            (object
             (repl:run-debugger-loop condition k))))))))
